in the past, functional components were limited to outputting content, weren't able to change internal state. class-based components were used to contain and manage state, and they had more overhead code (compared to functional components). functional components used to be very lean, just a function that returned jsx, while class-based components need a constructor to initialize state, you might need lifecycle methods, etc. therefore, class-based components would grow in size fast, so they used to require more code than functional components. prior to react 16.8, you had to convert funtional components to class-based components if you wanted to manage state, work with lifecycle methods, etc. but with the release of react 16.8 in 2018, react hooks were introduced (so you could manage state and also use kind of lifecycle methods in functional components).

react hooks are special js functions provided by reactjs (although you can also write your own hooks) that can only be used in functional components (and custom hooks), and they always start with 'use'. these functions add extra capabilities to functional components. therefore, with hooks, you don't need to convert functional components into class-based components if you want to manage state or use functionality equivalent to lifecycle methods, so you can always use functional components.