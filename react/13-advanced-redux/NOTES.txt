reducers must be pure, synchronous, etc. this also applies to the reducers that we use in the useReducer hook.

in our app, we use firebase as a backend, becauase we want keep our updated cart data even after we reload the app (otherwise we would lose it).

since reducers must be pure, side-effect free, and syncronous functions, how do we add side effects and asynchronous functionality (like sending an http request) to our redux app? (you can't add this code in the reducers of your slices)

the way we are using firebase, we won't be able to add backend logic (the logic that we use in the reducer when we add a product to check if it's an existing product, etc.), but we could do so if we were working on a serious project (there's a service called 'functions' which allows you to add your own code on the firebase backend which can be triggered for incoming requests, and which would allow you to transform data on the backend), but in our example, we are going to keep things simple, and only store the incoming data on the database.

see slide: if our backend does a lot of work, then our frontend could do less work (it could just send data to the backend, ie. data for a product that should be added for a cart, let the backend do the transformation, and then use the response on the frontend to then just hand it over to the reducer to store that response), so we could slim down our reducer (we would just receive from the backend the already tranformed data of our cart, and just store it in redux). but this is not the scenario we have in our example, becauase in our case we are keeping things simple in the backend (it just stores incoming data). that means that we have to do more work in the frontend (not only to store data in the redux store, but also to prepare/transform that data (this is what we are doing in the addItemToCart and removeItemFromCart reducers)). so KEEP IN MIND, if you have a backend, you could do all that data tranformation logic in the backend, so the frontend would be simpler. but in our case, since we are just using the backend to store data in the firebase database, then we will have to find a way to still do the work on the frontend, and at the same time send that transformed data to the backend WITHOUT doing that sending inside of the reducer (because we are not allowed to do it there). IT'S A COMMON PROBLEM TO HAVE A BACKEND THAT DOESN'T DO ALL THE WORK THAT YOU WOULD LIKE IT TO DO.

redux devtools are extra tools that we can use, which make debugging our redux state a bit easier, beause in larger applications, with a lot of redux state, handled by a lot different slices and a lot of different actions going on, it can be difficult to find errors. it will be easier to look into the current state of the overall redux store, without having to dive into different parts of the ui to verify that everything works correctly: install redux devtools as a browser extension (if you use redux without redux toolkit, you will have to set up some extra code to make redux dev tools work; if you have redux toolkit, redux devtools will work out of the box when we install the browser extension). WATCH AGAIN VIDEO 263: EXPLORING THE REDUX DEVTOOLS.

BUILD AGAIN THE PROJECT IN ADVANCED REDUX SECTION. AND RE-WATCH THE VIDEOS TO CHECK IF I MISSED ANYTHING IN THE NOTES.