custom hooks are just regular functions (the same as the built-in hooks, like useState, etc.), which can contain stateful logic. we use them to outsource stateful logic into re-usable functions. unlike regular functions, custom hooks can use other react hooks (both built-in hooks and custom hooks) and can therefore also leverage react state, managed with useState, or useReducer, etc. the idea is to outsource stateful logic that you might be using in different components

as you can see in the rules of react hooks, you can only use them at the top level of a functional component, you cannot use them inside nested functions of a component. if you want to outsource logic that involves hooks in a separate function, we need to use custom hooks.

if you call a custom hook in one of your components, and that hook, for example, registers a state, or an effect, etc. then this state and effect will be tied to the component in which you use the custom hook (in our example, when we use useCounter in ForwardCounter, the state that is generated in useCounter will be tied to ForwardCounter. ditto for BackwardCounter. if we use a custom hook in multiple components, each component will receive its own state (we never share state or effects across components)).