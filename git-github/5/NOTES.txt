https://www.canva.com/design/DAEP32iZwVc/4se77vKYGwT5_9NpxFbZoQ/view?utm_content=DAEP32iZwVc&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton

the problem with the centralized workflow is that, you will always have to pull (and therefore merge) before you push your code. also, if you have changes that are not ready to be commited yet, and then someone asks you for your opinion about some mediocre code that they pushed, you have to pull that code, and therefore merge the mediocre code in your code base, and you will also probably have to stash your changes if you don't want to commit them yet (otherwise your changes might be overwritten with the pull if there are conflicts). the point is that your colleagues had to 'break' the main branch (add mediocre code) in order for them to share their work with you. therefore, the branch is 'broken', not ready for production, will need to be fixed, and will potentially cause future problems if not fixed properly.

feature branch workflow: there are lot of patterns that companies use to name feature branches (eg. 'feat/navbar', etc.), we will not get into that.
before you create a new feature branch, you have to pull the 'main' branch to see if there are any updates.
(btw, you don't need to always push your feature branches to github, sometimes you will end up merging them with 'main' in your local, delete the feature branch, and push 'main')

if someone asks you for your opinion about their feature branch, you can either 'git fetch' and then 'git switch <feature/branch>', or 'git fetch' and then 'git checkout origin/<feature/branch>' (in the latter, you will go into detached head mode, and you won't end up with that feature branch in your local. after you checkout that branch, if you decide to make changes there, you can 'git switch <feature/branch>', and you will get the branch in your local, so you can work on it, commit and push)