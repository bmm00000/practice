AUTHOMATIC GLOBAL SCOPE:
if we assign a value to a variable that has not been declared, it becomes a global variable authomatically. For example, see screenshot. So WATCH OUT! you always need to declare the variables you are using inside your functions, or they will become global variables authomatically.
WATCH OUT! you need to call the function so, the variable inside becomes global, otherwise it will not do so (see screenshot)

HOISTING:
function and var declarations (NOT initializations!) are added to memory during the compile stage, so when we run the code we already have access to that function or var.

console.log(a) // referenceError, a is not defined

BUT:

console.log(a) // undefined
var a = 1

it's a good practice to declare your vars at the top of your scope. there's no point in declaring vars at the bottom, because they are going to be hoisted anyways. this way you prevent any undesirable hoisting effects.
