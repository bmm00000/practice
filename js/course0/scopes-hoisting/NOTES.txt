we study scopes and hoisting in order to work correctly with variables and functions.

scope is about accessing variables in various places in our app.

local and global scopes are important when you are working with the 'var' keyword, whereas the block scope works with different keywords.

in this module, we are going to talk about scope. context is a different concept, context is not about the visibility of variables in your code, but it refers to the object a function belongs to (it's a concept that explains what the 'this' keyword used in a function that is part of an object, refers to).

watch again 'Introducing Global and Local (Function) Scope'
declare and define a variable are two different things.
when we assign a value to a variable, we are defining that variable (when we do it for the first time, we are initializing that variable with that value, and that means we are defining that variable). after that, if we assign a new value to that variable we would not call this definition, but we would talk about value assignment, because we are assigning a new value to an already declared and defined variable.

when we work with 'var', we have either global or local (function) scope. when we work with 'let' or 'const', we always have block scope (even if it works like global scope, we call it 'block' scope; even if it's inside of a function, we also call it 'block' scope). what you have to keep in mind is that you can always access variables and functions from outer scopes, but not the other way around.

global object or global context in which our script runs (this is something characteristic of js. in many other programming languages, you don't have it. for example, in the browser, if your script executes in a document, the 'window' object is the globally available object.). when it comes to scope, the interesting thing is that some variables and functions are added to the global object, but not all. 

watch again How Scope Works
watch again Scope Overview
watch again The Global Object

to see how multiple scripts work together, see one.js and two.js

watch Modules & Scope
watch Variable Shadowing