let myName = 'Jose';

console.log(myName.toUpperCase());
console.log(myName); // 'Jose', because primitive values are immutable. therefore, toUpperCase() creates a brand new string, it doesn't change the original string.

// primitive wrapper objects: primitive values have no properties or methods, but we can go to the console and apply methods, for example, to a string (for example, 'toUpperCase()): that's a js special thing: in order to simplify working with primitive values, js gives you invisible wrapper objects that wrap themselves around the primitive values to expose utility methods and properties to us: the String(), Number(), etc. constructor functions are called invisibly to give us an object around the primitive value so that working with the primitive value is a bit easier. therefore, we have to differentiate between the object wrapper and the primitive value itself: you don't store that wrapper object anywhere, you just store the primitive value in 'myName', and when you work with this value, js authomatically gives you the wrapped version of it. in a nutshell, you work with that wrapped object, but at the same time, what's stored in the variable is the primitive value, so you have the best of both worlds: you have the primitive value stored in the variable, but when you are working with it (using it in code) you have these utility methods and properties to make your life as a developer easier.
