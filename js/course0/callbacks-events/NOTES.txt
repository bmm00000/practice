direct vs indrect function execution (callbacks and events):

direct execution: when the js engine reaches the line of code that has a function call, it executes it (for example, line 11 of our project)

indirect execution: (for example, line 9 of our project) if you passed the function with parenthesis ('defuse()'), it would be executed directly as soon as the js engine reaches that line of code (in that case, what would be passed as second argument to addEventListener is the returned value of the function, which in this case is 'undefined'; if 'defuse' returned an anonymous function, then that anonymous function would be passed as a second argument to the event listener, so we may have the behaviour that we want if that anonymous function did what our 'defuse' function is doing). 

but we just pass a pointer to that function (we omit the parenthesis). this has to do with how js works under the hood: functions is js are objects, so what we are doing is we are passing the function object as a second argument to addEventListener, to be precise, we are passing a pointer to that object (pointers are explained in the primitive/reference section of the course), and internally, the addEventListener method (which is provided out of the box by js and the browser) will take this pointer and memorize it, and will tell the browser 'hey! when this button is clicked, then let me know, so I can execute this function', and when the button is clicked, it will execute the function that js finds at the address in memory that this pointer points at.
the same indirect execution that we saw in addEventListener, also applies to many other methods, like setInterval, etc. (ie, we give a pointer to setInterval, so that setInterval (which is a built-in function in the browser) will call the function for us every certain amount of time)

(btw, if you add parenthesis at the end of an anonymous function, it's an iife (Immediately-invoked Function Expression), a self executing function; a self-executing anonymous function is a special function which is invoked right after it is defined)