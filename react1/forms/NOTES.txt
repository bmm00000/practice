forms can assume different states (see two states in screenshot), but it's even possible that the state will be unknown, because you have some asynchronous validation where you need to send a request to a server behind the scenes to check if certain item is avaialble (eg. an email address), so you can find out whether the input is valid or not.

keep in mind that the two states we have in the screenshot, don't apply to the overall form, but to the individual inputs, so the sum of the states of the inputs will make up the overall form state.

when we dive into showing error messages and highlighting invalid inputs, things get even more complex, because the question then is when to validate, ie. when should you check the user input, when the form is submitted, when the input loses focus, etc.? (see screenshot)

see screenshot: when we validate an input when losing focus, the good thing is that we validate when the user is done with a particular input, so we don't wait until the whole form is submitted. this can be very useful for untouched forms, ie. when the user has not entered anything yet. however, the downside with validating when losing focus, is that, if the user already entered something invalid, and now comes back to fix it, you don't tell the user if the new input is valid or not until he or she is done entering the new input. in this situation is when validation on every keystroke might be better. but if you are validating on every keystroke, you might be warning the user even before he or she had a chance of entering valid values. therefore, if you visit a form for the first time and haven't entered anything, you would be greeted with a lot of warnings if we only validate on keystroke, because we haven't given the user any chance of entering anything valid. However, if we combine this with the other methods, and we only validate with keystroke when the input was invalid before, then we can provide better feedback.

https://academind.com/tutorials/hide-javascript-code
SUMMARY OF THE VIDEO:
is the js code in the browser (that you can inspect in 'sources' in devtools) secure (since users can access it), for example your api keys? is this a problem? not necessarily. you shouln't put confidential info there, but the api key is something different: with the api key nobody can access your firebase account (they don't have your username and password). what they could do is to use your api. is this a problem? it depends. you may want to have a public api that other users can use. but if you only want to use that api key from your app, and not any other app, then you can lock down access (you can set up an api whitelist in the Google API Console, go to 'credentials', load your firebase project, and you can restrict the api to certain ip addresses or domains: this is a way to control which api addresses or domains can send requests to this api with this key; if the request come from another page, it will get blocked). on the other hand, can users steal your browser js logic? in theory yes, but production code is very hard to read, and on the other side, your core business logic will always reside on the server