redux is a state management system for cross-component or app-wide state. 

for cross-component and app-wide state, passing around data through props can become cumbersome. that's why we learned about react context. redux solves the same problem. so why do we need redux if we already have react context? react context has a few potential disadvantages (see screenshot), but these disadvantages might not matter for the app that you are building: depending on your app, you can use context or redux or both (typically, for application wide state you will use only one of the two, but still, you could use redux for app-wide state, but also use context for selected multicomponent states which are important in parts of your app).

disadvantages: complex setup/management (if you are building a large app, for example, an enterprise-level app, if you use context, you can end up with code like in the screenshot, ie. you have different pieces of context that affect multiple components or the entire app, and multiple context provider components, so the resulting jsx code is deeply nested. on the other hand, if you decide to build just one big context and provider component for managing all the states, then you will end up with a large context provider component which manages a lot of different things, which can become difficult to maintain (see screenshot)). performance (context is great for low frequency updates (like changing a theme, authentication, etc.), but it's not that great if your data changes a lot (high frequency changes) (see screenshot: (note: redux is a flux-like state management library))). REDUX doesn't suffer from these disadvantages.

components never manipulate the store data. for that, we have the reducer function.

as a general concept in programming, reducer functions are functions that take some input, and then transform that input (reduce it, for example, reduce a list of numbers to the sum of those numbers) and spit out a new output.

an action is a simple js object that describes the kind of operation that a reducer should perform.

a reducer function should be a pure function, meaning that the same inputs should always produce the same outputs, and there should be no side effects inside of that function, eg. no http requests, write something to localStorage, fetch something from local storage, etc.

redux is not a library restricted to react, you can use redux in any js project, and there are implementation for other programming languages as well. that's why, redux is not the only thing that we will install in our react projects (redux doesn't know about react). in order to make working with redux in react applications easier, we install the 'react-redux' package (this is a package that makes connecting react applications to redux stores, reducers and so on, very simple. for example, it will make it very simple to subscribe components to the redux store)