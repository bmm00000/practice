when you have different states that can be considered to belong together (such as 'enteredEmail' and 'emailIsValid', or even to manage the overall formIsValid state (and include both email and password there); in our example, we manage together enteredEmail and emailIsValid for the sake of simplicity, but we could manage all our current states together), or when you are updating a state by using another state (not the situation where we use the function, but when you are using another state), then you can use useReducer. in the latter situation, as it happens when we use the function to update state (new state depending on former state), our state update might not work, since state updates are scheduled in react, and it might happen that we don't have the latest state that we want to update the other state. therefore, we should use the function to update state, but we can't, since the function receives the latest state of the state that we are in, not of another state. what to do?? in this situation, useReducer is a very good option (when you need to update a state which depends on ANOTHER state). if you don't use useReducer, you could also manage the two related states as a single state (in an object), but if you do that, when your state becomes more complex and combines more and more elements, useReducer would be a better option.
