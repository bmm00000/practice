you never put in your frontend facing js code private information that gives direct access to your firebase account (for example, usernames, passwords, etc.). for other data that only grant access to your api, but not to your account (eg. api keys), you might want to set up some filtering settings in firebase, so you restrict/authorize access from some ip addresses, etc. and it's not that bad. but in any case, you can always put it into the server side code, so it's not accessible at all from the frontend.
in a nushell, is it a problem that people can read your js code in the browser dev tools sources tab? yes, they can read it, but if you do it right, they can't do anything with it. and if you are worried about people stealing your logic, yes they can do it, but the production code is very hard to read, and also, your core business logic will always be on the server.
https://academind.com/tutorials/hide-javascript-code

Using the Star Wars API (this is a backend api)
MUST READ:

In the next lecture, you will be introduced to our demo backend that will be used in this course section: The Star Wars API.

I will use this page: https://swapi.dev/

Loading this page (and hence accessing this backend) might fail - if that is the case for you, you can use this alternative: https://swapi.py4e.com/

WHEN WE TALK ABOUT APIS IN THE CONTEXT OF HTTP REQUESTS, we typically talk about rest or graphql apis (two different standards of how a server should expose its data). for example SWAPI is a rest api, and it means that there are a couple of urls to which you can send a request to get back data in a certain format, and different urls to which you can send requests, will give you different chunks of data (you have different entry points which lead to different results).

rest api: multiple urls (or paths on the domain where you host the web service) are exposed by web service, that react to different http methods (verbs) being used in the request (get, post, etc.)

graphql api: only one endpoint that is reached always by post request

a common misconception with graphql, since it was invented by facebook, is that you have to use react in order to communicate with a graphql api, and this is not correct.

stateless: the don't care about the exact client (data about the client is not stored in the backend), you just expose the endpoints, and whoever send the right kind of request, gets the data, or posts the data, etc. (you don't see session-based authentication approaches being used)

the core differece between rest and graphql is how to send requests to them (see screenshot). for rest api, the creators of the api decide which endpoints or paths, for which http verbs are available (if you send an http request to a path or verb that is not defined, you will get an error). for graphql api, we have just one endpoint, it can have any path you want (although very often it is '/graphql'), it's always a post request, you don't target different endpoints/urls but you just state what you want in your request body. therefore, the http verb has to be 'post', the path is always the same ('/graphql'). the graphql api on the back end will be able to parse the command or query that you send in the body of the request.

so you could say that in a rest api, your api endpoints map resources or actions that happen on the server (for example, the action or creating a new post, or getting all posts), to certain combination of url and http verb. operation types: query (you want to get some data), mutation (you want to post some data), subscription (you want the server to inform you about changes that happen with the data).

one of the big advantages of graphql compared to rest: with rest, you target a specific resource, for example, get all posts, and you retrieve all posts with all fields that belong to each post (you may use query parameters to limit what you operate with (ie. implement pagination, limit amount of posts that are retreived, or limit what's retrieved inside of the posts...), but it would also add complexity to the api)), so you end up retrieving more data that you are interested in (for example, you may be only interested in the picture and title of the posts, but you end up with ids, descriptions, or other). this is a common problem with rest apis. on the other hand, a big advantage of the rest api is that is pretty clear/easy to understand. however, the advantage of graphql is that you can be very specific about which kind of data you want to retreive. in a nushell, graphql apis bring many advantages, but rest apis are way more common, are easier to operate with (you don't have to learn a query language, and queries might get cluttered, and might be error-prone while coding them). (however, with apollo, a third party package, is definitely easier to build and use graphql apis). at the end of the day, it comes down to what you need: if you are building an app that needs different kinds of data in different pages and bandwith has to be taken into account, so you have to be specific on what kind of data you are retreiving, then a graphql api might be much better. but if you want a lot of data per page of your app, then rest might be better.

even though we can use a third party package, like axios, the fetch api is a built in mechanism for sending http requests from inside js. the fetch api is built into browsers, and allows us to fetch data and also to send data

when you are sending http requests, you can get errors because your connection fails, or becuase the server doesn't work, etc.:
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
you can simulate this, if you change the url of the api, then you will get an error in the console, but the users will see the 'loading...' message on the screen. this is not a good user experience, that's why we need to handle errors. if we are using '.then' blocks, we use a '.catch' block, but if we are using async/await, we use try/catch.