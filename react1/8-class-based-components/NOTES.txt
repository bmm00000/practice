previously to react 16.8, you had to use class-based components to manage state.
react 16.8 introduced hooks for functional components (these features were previously reserved for class-based components) (class-based components can't use react hooks)

class based components can work together with functional components (a class-based component can render a functional component and viceversa; however, if you are building something from scratch, you probably will stick to one or the other).

you can define and provide Context in class-based components, the same way as we learnt in functional components. the only part that changes is how you use context in your class-based components. You can use the UsersContext.Consumer component that can also be used in both functional components. with useContext in functional components, you can listen to multiple contexts in the same component by calling useContext multiple times, but there's no equivalent for class-based components: you can only connect one class-based component to use context, and you do that by adding a 'static' keyword with 'contextType'.

ERROR BOUNDARIES: sometimes, something goes wrong in your app, we are not talking about bugs that you introduced while coding, but sometimes there are errors which you can't prevent, or which are simply being used to transport information that something went wrong from one part of the app to another part. for example, when an http request is sent, if the server is temporarily not responding, the request will not complete and you will end up with an error being generated in your app. there's nothing you can do about that (for example, see componentDidUpdate in Users.js)