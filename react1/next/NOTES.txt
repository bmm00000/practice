for the presentation, see fireship and uidotdev videos in youtube.

nextjs.org: the react framework for production.
it makes building large scale react apps easier.

if you want to build large scale react projects, you will typically need to add extra libraries for routing, authentication, etc.

nextjs is a framework: it offers more built-in features than a library, it gives you clear rules/guidance on how to write your code, structure your files, etc.
it has many built-in features that you would need to add to react on your own if you didn't use nextjs. therefore, we won't have to re-invent the wheel, you won't have to add as many third party libraries to solve common problems that you have while building bigger real production apps.

server-side rendering: preparing the content of a page in the server instead of in the client.
inspect a page built with react: you have a pretty empty page, only the root div into which the react app is loaded and rendered. but all that rendering is done by react, and since react is a client side js library, all that rendering happens on the client (ie. in the browsers of your users). that's why the html code that the server sends to the client is pretty empty. why can this be a problem? if your page fetches some data that should be displayed from a server, the user might see a loading state, some flickering before the data gets loaded (example of our meetups page), because the data fetching only begins when the js code is executed on the client, and then we still have to wait for the response of the request, BECAUSE THE PAGE THAT WE REQUESTED DID NOT CONTAIN THAT DATA (it was empty).
this can also be a SEO problem: search engine crawlers will only see that initially empty html page.
THIS IS WHEN SERVER-SIDE RENDERING CAN HELP US: RENDER REACT COMPONENTS ON A SERVER.
keep in mind that react alone has built-in features that allow you to add server side rendering (ReactDOMServer), but it requires extra set up from your side and it can be tricky. with nextjs, this is already built-in without any extra set up from your side (therefore, there will not be a flickering loading state when loading the side, and the search engines will see what our users see, so no problems with SEO (inspect the code of a nextjs page: everything is there in the page that we got from the server)).
after the initial load, we still have a standard react app (spa) running in the browser: subsequent navigation actions by the user are handled by react in the browser to have the fast/reactive user experience that react gives us. we still get that with nextjs, but for the initial load, we have the pre-rendered page (that's why client side and server side is more blended with nextjs) 

file-based routing: in traditional react, you don't even have a router (routing means that we give the user the illusion of having multiple pages while we navigate around, but in reality we only have a single page), typically we use 'react router' for that (this router watches the url, and when it changes, it prevents the default of sending a new http request to a server, and instead renders different content on the page). (show example of code using react router). this is a good package, but it's extra code that you have to write, and you end up storing the components that add as pages in a separate folder. with nextjs, you define pages and routes with folders and files, instead of code (show example of nextjs app, 'pages' folder, etc.): at the end, it's less code and much more understandable (remember, this is the intuitive way that we used to organize files that will be translated into pages when we started to learn web development).

with nextjs we also have standalone backend code, that for example, works with the file system, or reaches out to a database. with nextjs it's very easy to add our own backend api into our react project using node.js code (we won't need to build a standalone rest api project, but instead we will only work on one project, our next.js project)

we need node.js to create our next.js project, and that project will also need node.js to execute it in the future (eg. server-side rendering will use node.js under the hood).

if you clone a next.js project, you also need to 'npm install' the dependencies.

unlike in a regular react app, in the 'public' folder you don't have an index.html file by default. the reason is that next.js has built-in pre-rendering, and even though we have an spa, that single page is dynamically pre-rendered when a request reaches the server (to be precise, next.js allows us to determine WHEN a page should be pre-rendered. but we are going to learn that step by step), so that you do return an initial page with content. 

hence, the 'pages' folder will be the most important folder for us. the name of the file will be as the path that will be used to access that page (with the exeption of the index.js name), eg. www.domain.com/news

you don't need to import React from 'react', since next.js supports the new react feature, whereby you don't need to import React to write JSX.

npm run dev: start the development server.

if you inspect the pages, you won't see just the skeleton (as in a react project), but you will see the actual content of the page (the html code sent by the server contains the content, so we won't have any flickering of the page, and search engines will see that content). therefore, as we can see, server side rendering and file based routing works out of the box, without installing any other package.

in order to create dynamic pages, we use the [] syntax in the file name.

in a next.js project, the 'pages' name for the folder with pages is reserved. the 'components' folder can be named however you want.

in order to add a real backend with a real database where the data will be stored, and from where we will fetch data (this is the last major next.js feature which is added by next.js to your apps: next.js makes it easy for us to build a backend api, together with our frontend react app, in the same project), we will use another next.js key feature: api routes (these are special routes or special pages which don't return html code, but which are about accepting incoming http requests (GET, POST, PUT, PATCH, etc.), with json data attached to them, and which then will do whatever you need to do, for example, store data in a database, and then return json data). in a nutshell, 'api routes' allow you to build your own api endpoints as part of this next.js project, and then will be served by the same server as your next.js app (remember, in order to add 'api routes' you have to name the folder inside of 'pages' as 'api', this is a special name; then nextjs will pick up any js files inside of the 'api' folder, and will turn those files into api routes, ie. endpoints that can be targed by requests, and that should receive json and return json (the names of the js files will act as path segments in the url, and inside those files we will place our server side code, this code will never run on the client, always on the server, so you can use credentials there, without the risk of exposing them to users, etc.)). the server side code in these files will be triggered whenever a request is sent to the route of the file name (in our case, '/api/new-meetup')