ReactDOM is our interface to the web; react.js doesn't know about the web or the browser, the only thing it knows is how to work with components, and state; ReactDOM is what will bring real html elements to the screen; reactdom is responsible for working with the real DOM, which is part of the browser and will be what the users will be able to see. React only cares about components, props (data you pass to components to make components configurable and to enable parent-child component communication), state (internal data inside of a component), and context (component-wide data). react checks if a component wants to render something new, and if so, react will let reactDOM know about that, so reactDOM will bring that new output to the screen.

react uses a concept called 'virtual dom': react determines how the component tree currently looks like, and how it should look like after a state update, and that info is handed over to reactdom, and reactdom knows how to manipulate the real dom to match that virtual dom, that virtual snapshot that react derived from your component tree

whenever state, props, or context of a component changes (at the end, everything comes down to state; if props change is because some state changed in a parent component...), that component function is re-executed (the component is re-evaluated by react). BUT re-executing/re-evaluating a component is not equivalent to re-rendering in the DOM. the real dom is only updated in the places where it needs to be changed, based on that difference that react derived between the previous state of a component and its tree, and the current state after the state, prop or context change: the real dom is changed only when needed, that's important for performance (a virtual comparison between a previous state and the current state is easier and chaper to do, it happens only in memory; reaching out to the real dom that is rendered in the browser is more expensive from a performance perspective so your site would become slow if you are working with the real dom too much). that's why react does this virtual comparisons with the virtual dom, and then only passes the changes between your last snapshot and the current snapshot to the real dom (it does a virtual dom diffing: finding out the difference between two snapshots)

in the screenshot example, reactdom will not re-render everything, it will not touch the div or h1 ('hi there'), it will only insert the paragraph ('this is new')

in short, react will diff the virtual doms, and then it will only pass to reactdom the differences, so reactdom can render them on the real dom

EVEN THOUGH WE re-execute a component, we don't re-initialize state every time. why is that? react makes sure that useState and the value that you pass as default, is only considered once. for subsequent re-evaluations, react recognizes that it already has a state for that component, and simply updates that state as needed. therefore, it will never re-initialize the state unless the component was completely removed from the dom (for example, if child components are rendered conditionally and mounted/unmounted from the dom, every time they are mounted again, then state will be initialized)
THE SAME APPLIES  to useReducer, for example.